// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: query.sql

package db

import (
	"context"
	"database/sql"
)

const createFruit = `-- name: CreateFruit :one
INSERT INTO fruit (
  name, created
) VALUES (
  ?, ?
)
RETURNING id, name, created
`

type CreateFruitParams struct {
	Name    sql.NullString
	Created sql.NullString
}

func (q *Queries) CreateFruit(ctx context.Context, arg CreateFruitParams) (Fruit, error) {
	row := q.db.QueryRowContext(ctx, createFruit, arg.Name, arg.Created)
	var i Fruit
	err := row.Scan(&i.ID, &i.Name, &i.Created)
	return i, err
}

const deleteFruit = `-- name: DeleteFruit :exec
DELETE FROM fruit
WHERE name = ?
`

func (q *Queries) DeleteFruit(ctx context.Context, name sql.NullString) error {
	_, err := q.db.ExecContext(ctx, deleteFruit, name)
	return err
}

const listFruit = `-- name: ListFruit :many
SELECT id, name, created FROM fruit
`

func (q *Queries) ListFruit(ctx context.Context) ([]Fruit, error) {
	rows, err := q.db.QueryContext(ctx, listFruit)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Fruit
	for rows.Next() {
		var i Fruit
		if err := rows.Scan(&i.ID, &i.Name, &i.Created); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
